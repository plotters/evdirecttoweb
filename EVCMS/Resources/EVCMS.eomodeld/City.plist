{
    attributes = (
        {allowsNull = N; columnName = "city_id"; name = cityId; prototypeName = key; }, 
        {
            allowsNull = N; 
            columnName = "client_id"; 
            name = clientId; 
            prototypeName = key; 
        }, 
        {
            allowsNull = N; 
            columnName = "created_by_id"; 
            name = createdById; 
            prototypeName = key; 
        }, 
        {
            allowsNull = N; 
            columnName = "creation_time"; 
            name = creationTime; 
            prototypeName = datetime; 
        }, 
        {allowsNull = N; columnName = name; name = name; prototypeName = string256; }, 
        {allowsNull = N; columnName = "site_id"; name = siteId; prototypeName = key; }
    ); 
    className = "net.events.cms.eo.City"; 
    classProperties = (client, createdBy, creationTime, name, site); 
    externalName = cities; 
    fetchSpecificationDictionary = {}; 
    name = City; 
    primaryKeyAttributes = (cityId); 
    relationships = (
        {
            destination = Client; 
            isMandatory = Y; 
            joinSemantic = EOInnerJoin; 
            joins = ({destinationAttribute = clientId; sourceAttribute = clientId; }); 
            name = client; 
        }, 
        {
            destination = EventsUser; 
            isMandatory = Y; 
            joinSemantic = EOInnerJoin; 
            joins = ({destinationAttribute = contactId; sourceAttribute = createdById; }); 
            name = createdBy; 
        }, 
        {
            deleteRule = EODeleteRuleDeny; 
            destination = Event; 
            isToMany = Y; 
            joinSemantic = EOInnerJoin; 
            joins = ({destinationAttribute = cityId; sourceAttribute = cityId; }); 
            name = events; 
        }, 
        {
            destination = Site; 
            isMandatory = Y; 
            joinSemantic = EOInnerJoin; 
            joins = ({destinationAttribute = siteId; sourceAttribute = siteId; }); 
            name = site; 
        }
    ); 
}
