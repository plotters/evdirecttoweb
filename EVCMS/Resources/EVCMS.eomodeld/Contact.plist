{
    attributes = (
        {
            allowsNull = Y; 
            columnName = "client_id"; 
            name = clientId; 
            prototypeName = key; 
        }, 
        {columnName = "company_name"; name = companyName; prototypeName = string256; }, 
        {
            columnName = "company_name2"; 
            name = companyName2; 
            prototypeName = string256; 
        }, 
        {columnName = "contact_id"; name = contactId; prototypeName = key; }, 
        {
            allowsNull = Y; 
            columnName = "created_by_id"; 
            name = createdById; 
            prototypeName = key; 
        }, 
        {
            allowsNull = N; 
            columnName = "creation_time"; 
            name = creationTime; 
            prototypeName = datetime; 
        }, 
        {allowsNull = N; columnName = deleted; name = deleted; prototypeName = flag; }, 
        {columnName = email; name = email; prototypeName = string256; }, 
        {columnName = firstname; name = firstname; prototypeName = string256; }, 
        {
            allowsNull = N; 
            columnName = "inheritance_type"; 
            name = inheritanceType; 
            prototypeName = string256; 
        }, 
        {columnName = lastname; name = lastname; prototypeName = string256; }, 
        {columnName = middlename; name = middlename; prototypeName = string256; }
    ); 
    className = "net.events.cms.eo.Contact"; 
    classProperties = (
        addresses, 
        client, 
        companyName, 
        companyName2, 
        createdBy, 
        creationTime, 
        deleted, 
        email, 
        firstname, 
        inheritanceType, 
        lastname, 
        middlename, 
        notes
    ); 
    externalName = contacts; 
    fetchSpecificationDictionary = {}; 
    internalInfo = {
        "_clientClassPropertyNames" = (
            addresses, 
            client, 
            creationTime, 
            deleted, 
            firstname, 
            inheritanceType, 
            lastname, 
            middlename, 
            notes
        ); 
    }; 
    isAbstractEntity = Y; 
    name = Contact; 
    primaryKeyAttributes = (contactId); 
    relationships = (
        {
            deleteRule = EODeleteRuleCascade; 
            destination = Address; 
            isToMany = Y; 
            joinSemantic = EOInnerJoin; 
            joins = ({destinationAttribute = contactId; sourceAttribute = contactId; }); 
            name = addresses; 
        }, 
        {
            destination = Client; 
            isMandatory = N; 
            isToMany = N; 
            joinSemantic = EOInnerJoin; 
            joins = ({destinationAttribute = clientId; sourceAttribute = clientId; }); 
            name = client; 
        }, 
        {
            destination = Person; 
            isMandatory = N; 
            joinSemantic = EOInnerJoin; 
            joins = ({destinationAttribute = contactId; sourceAttribute = createdById; }); 
            name = createdBy; 
        }, 
        {
            deleteRule = EODeleteRuleCascade; 
            destination = ContactNote; 
            isToMany = Y; 
            joinSemantic = EOInnerJoin; 
            joins = ({destinationAttribute = contactId; sourceAttribute = contactId; }); 
            name = notes; 
        }
    ); 
}
