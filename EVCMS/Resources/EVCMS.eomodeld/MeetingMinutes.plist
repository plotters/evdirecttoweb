{
    attributes = (
        {
            allowsNull = N; 
            columnName = "client_id"; 
            name = clientId; 
            prototypeName = key; 
        }, 
        {
            allowsNull = N; 
            columnName = "created_by_id"; 
            name = createdById; 
            prototypeName = key; 
        }, 
        {
            allowsNull = N; 
            columnName = "creation_time"; 
            name = creationTime; 
            prototypeName = datetime; 
        }, 
        {
            allowsNull = N; 
            columnName = "meeting_minutes_id"; 
            name = meetingMinutesId; 
            prototypeName = key; 
        }, 
        {allowsNull = N; columnName = name; name = name; prototypeName = string256; }, 
        {
            allowsNull = N; 
            columnName = "short_description"; 
            name = shortDescription; 
            prototypeName = string4m; 
        }
    ); 
    className = "net.events.cms.eo.MeetingMinutes"; 
    classProperties = (client, createdBy, creationTime, entries, meetings, name, shortDescription); 
    externalName = "meeting_minutes"; 
    fetchSpecificationDictionary = {}; 
    name = MeetingMinutes; 
    primaryKeyAttributes = (meetingMinutesId); 
    relationships = (
        {
            destination = Client; 
            isMandatory = Y; 
            joinSemantic = EOInnerJoin; 
            joins = ({destinationAttribute = clientId; sourceAttribute = clientId; }); 
            name = client; 
        }, 
        {
            destination = EventsUser; 
            isMandatory = Y; 
            joinSemantic = EOInnerJoin; 
            joins = ({destinationAttribute = contactId; sourceAttribute = createdById; }); 
            name = createdBy; 
        }, 
        {
            deleteRule = EODeleteRuleCascade; 
            destination = MeetingMinutesEntry; 
            isToMany = Y; 
            joinSemantic = EOInnerJoin; 
            joins = (
                {destinationAttribute = meetingMinutesId; sourceAttribute = meetingMinutesId; }
            ); 
            name = entries; 
        }, 
        {
            deleteRule = EODeleteRuleCascade; 
            destination = Meeting; 
            isToMany = Y; 
            joinSemantic = EOInnerJoin; 
            joins = (
                {destinationAttribute = meetingMinutesId; sourceAttribute = meetingMinutesId; }
            ); 
            name = meetings; 
        }
    ); 
}
