// Entity Modeler v1.0.0
{
	attributes = (
		{
			allowsNull = N;
			columnName = client_id;
			name = clientId;
			prototypeName = key;
		},
		{
			columnName = filesystem_object_id;
			name = filesystemObjectId;
			prototypeName = key;
		},
		{
			allowsNull = N;
			columnName = inheritance_type;
			name = inheritanceType;
			prototypeName = string256;
		},
		{
			allowsNull = N;
			columnName = name;
			name = name;
			prototypeName = string256;
		},
		{
			allowsNull = N;
			columnName = path;
			name = path;
			prototypeName = string4k;
		},
		{
			columnName = site_id;
			name = siteId;
			prototypeName = key;
		}
	);
	className = net.events.cms.eo.Stylesheet;
	classProperties = (
		client,
		inheritanceType,
		name,
		pageWrappers,
		pages,
		path,
		site
	);
	externalName = filesystem_objects;
	internalInfo = {};
	name = Stylesheet;
	parent = FilesystemObject;
	primaryKeyAttributes = (
		filesystemObjectId
	);
	relationships = (
		{
			destination = Client;
			isMandatory = Y;
			joinSemantic = EOInnerJoin;
			joins = (
				{
					destinationAttribute = clientId;
					sourceAttribute = clientId;
				}
			);
			name = client;
		},
		{
			definition = xStylesheetPageWrappers.pageWrapper;
			name = pageWrappers;
			numberOfToManyFaultsToBatchFetch = 10;
		},
		{
			deleteRule = EODeleteRuleDeny;
			destination = AbstractPage;
			isToMany = Y;
			joinSemantic = EOInnerJoin;
			joins = (
				{
					destinationAttribute = stylesheetId;
					sourceAttribute = filesystemObjectId;
				}
			);
			name = pages;
			numberOfToManyFaultsToBatchFetch = 10;
		},
		{
			destination = Site;
			isMandatory = Y;
			isToMany = N;
			joinSemantic = EOInnerJoin;
			joins = (
				{
					destinationAttribute = siteId;
					sourceAttribute = siteId;
				}
			);
			name = site;
		},
		{
			deleteRule = EODeleteRuleCascade;
			destination = XStylesheetPageWrapper;
			isToMany = Y;
			joinSemantic = EOInnerJoin;
			joins = (
				{
					destinationAttribute = stylesheetId;
					sourceAttribute = filesystemObjectId;
				}
			);
			name = xStylesheetPageWrappers;
			propagatesPrimaryKey = Y;
		}
	);
	restrictingQualifier = "(inheritanceType = 'Stylesheet')";
}