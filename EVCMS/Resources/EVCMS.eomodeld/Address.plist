{
    attributes = (
        {columnName = "address_id"; name = addressId; prototypeName = key; }, 
        {
            allowsNull = N; 
            columnName = "address_name"; 
            name = addressName; 
            prototypeName = string256; 
        }, 
        {
            columnName = "address_type_code"; 
            name = addressTypeCode; 
            prototypeName = string256; 
        }, 
        {allowsNull = N; columnName = city; name = city; prototypeName = string256; }, 
        {
            allowsNull = N; 
            columnName = "client_id"; 
            name = clientId; 
            prototypeName = key; 
        }, 
        {columnName = "contact_id"; name = contactId; prototypeName = key; }, 
        {
            allowsNull = Y; 
            columnName = "country_id"; 
            name = countryId; 
            prototypeName = key; 
        }, 
        {
            allowsNull = N; 
            columnName = "postal_code"; 
            name = postalCode; 
            prototypeName = string256; 
        }, 
        {
            allowsNull = Y; 
            columnName = "province_id"; 
            name = provinceId; 
            prototypeName = key; 
        }, 
        {
            allowsNull = N; 
            columnName = street1; 
            name = street1; 
            prototypeName = string256; 
        }, 
        {columnName = street2; name = street2; prototypeName = string256; }
    ); 
    className = "net.events.cms.eo.Address"; 
    classProperties = (
        addressName, 
        addressTypeCode, 
        city, 
        client, 
        contact, 
        country, 
        postalCode, 
        province, 
        street1, 
        street2
    ); 
    externalName = addresses; 
    fetchSpecificationDictionary = {}; 
    name = Address; 
    primaryKeyAttributes = (addressId); 
    relationships = (
        {
            destination = Client; 
            isMandatory = Y; 
            joinSemantic = EOInnerJoin; 
            joins = ({destinationAttribute = clientId; sourceAttribute = clientId; }); 
            name = client; 
        }, 
        {
            destination = Contact; 
            isMandatory = Y; 
            isToMany = N; 
            joinSemantic = EOInnerJoin; 
            joins = ({destinationAttribute = contactId; sourceAttribute = contactId; }); 
            name = contact; 
        }, 
        {
            destination = Country; 
            isToMany = N; 
            joinSemantic = EOInnerJoin; 
            joins = ({destinationAttribute = countryId; sourceAttribute = countryId; }); 
            name = country; 
        }, 
        {
            destination = Province; 
            isMandatory = N; 
            joinSemantic = EOInnerJoin; 
            joins = ({destinationAttribute = provinceId; sourceAttribute = provinceId; }); 
            name = province; 
        }
    ); 
}
