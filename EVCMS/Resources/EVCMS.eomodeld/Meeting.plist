{
    attributes = (
        {
            allowsNull = N; 
            columnName = "client_id"; 
            name = clientId; 
            prototypeName = key; 
        }, 
        {
            allowsNull = N; 
            columnName = "created_by_id"; 
            name = createdById; 
            prototypeName = key; 
        }, 
        {
            allowsNull = N; 
            columnName = "creation_time"; 
            name = creationTime; 
            prototypeName = datetime; 
        }, 
        {
            allowsNull = N; 
            columnName = "date_and_time"; 
            name = dateAndTime; 
            prototypeName = datetime; 
        }, 
        {
            allowsNull = N; 
            columnName = location; 
            name = location; 
            prototypeName = string4k; 
        }, 
        {
            allowsNull = N; 
            columnName = "meeting_id"; 
            name = meetingId; 
            prototypeName = key; 
        }, 
        {
            allowsNull = N; 
            columnName = "meeting_minutes_id"; 
            name = meetingMinutesId; 
            prototypeName = key; 
        }
    ); 
    className = "net.events.cms.eo.Meeting"; 
    classProperties = (
        client, 
        createdBy, 
        creationTime, 
        dateAndTime, 
        entries, 
        location, 
        meetingMinutes
    ); 
    externalName = meetings; 
    fetchSpecificationDictionary = {}; 
    name = Meeting; 
    primaryKeyAttributes = (meetingId); 
    relationships = (
        {
            destination = Client; 
            isMandatory = Y; 
            joinSemantic = EOInnerJoin; 
            joins = ({destinationAttribute = clientId; sourceAttribute = clientId; }); 
            name = client; 
        }, 
        {
            destination = EventsUser; 
            isMandatory = Y; 
            joinSemantic = EOInnerJoin; 
            joins = ({destinationAttribute = contactId; sourceAttribute = createdById; }); 
            name = createdBy; 
        }, 
        {
            deleteRule = EODeleteRuleCascade; 
            destination = MeetingMinutesEntry; 
            isToMany = Y; 
            joinSemantic = EOInnerJoin; 
            joins = ({destinationAttribute = meetingId; sourceAttribute = meetingId; }); 
            name = entries; 
        }, 
        {
            destination = MeetingMinutes; 
            isMandatory = Y; 
            joinSemantic = EOInnerJoin; 
            joins = (
                {destinationAttribute = meetingMinutesId; sourceAttribute = meetingMinutesId; }
            ); 
            name = meetingMinutes; 
        }
    ); 
}
