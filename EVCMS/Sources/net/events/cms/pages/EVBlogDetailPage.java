package net.events.cms.pages;
// Generated by the WOLips Templateengine Plug-in at Jul 29, 2007 1:08:10 PM

import net.events.cms.eo.*;
import net.events.cms.extensions.*;

import com.webobjects.appserver.*;
import com.webobjects.eoaccess.*;
import com.webobjects.foundation.*;

import er.extensions.*;

/**
 * Page for a detail entry of a blog, keeps also tracks of submitted comments
 * 
 * @author cug
 */
public class EVBlogDetailPage extends EVCMSPage {
	
	private BlogEntry blogEntry;
	
	private String senderName;
	private String email;
	private String comment;
	
	private BlogComment blogComment;

    /**
     * Standard constructor
     * 
     * @param context
     */
    public EVBlogDetailPage(WOContext context) {
        super(context);
    }
    
    /**
	 * Checks whether there is a comment in the response, calls super afterwards
	 * 
	 * @see com.webobjects.appserver.WOComponent#appendToResponse(com.webobjects.appserver.WOResponse,
	 *      com.webobjects.appserver.WOContext)
	 */
    public void appendToResponse (WOResponse response, WOContext context) {

    	// check whether we got a comment in the request
    	if (!this.checkForComment()) {
    		BlogEntryViewHistory historyEntry = (BlogEntryViewHistory) EOUtilities.createAndInsertInstance(this.blogEntry().editingContext(), BlogEntryViewHistory.ENTITY_NAME);
    		historyEntry.addObjectToBothSidesOfRelationshipWithKey(this.blogEntry(), BlogEntryViewHistory.BLOGENTRY);
    		historyEntry.setRemoteAddress(((ERXRequest) this.context().request()).remoteHostAddress());
    		historyEntry.setRequestUri(this.context().request().uri());
    		historyEntry.setType(BlogEntryViewHistory.DETAIL_TYPE);
    		historyEntry.setUserAgent(this.context().request().headerForKey("user-agent"));
    		try {
    			this.blogEntry().editingContext().saveChanges();
    		}
    		catch (Exception e) {
    			e.printStackTrace();
    		}
    	}
    	super.appendToResponse(response, context);
    }
    
    /**
	 * Returns true, if there is no comment to be saved.
	 * 
	 * @return true, if there is no comment to be saved, false if there is a
	 *         comment with incomplete data
	 */
    public boolean commentSaved () {
    	return this.blogComment == null;
    }

	/**
	 * Checks the current request for a complete comment content and creates a
	 * new comment if it can. Sends out a notification email when a comment was
	 * created and successfully stored in the database
	 */
	private boolean checkForComment() {

    	if (this.context().request().stringFormValueForKey("email2") != null) {
    		// seems we got a spam bot on the page
    		return true;
    	}

    	this.setSenderName(this.context().request().stringFormValueForKey("name"));
    	this.setEmail(this.context().request().stringFormValueForKey("email"));
    	this.setComment(this.context().request().stringFormValueForKey("comment"));
    	
    	if (this.senderName() != null && this.email() != null && this.comment() != null) {
    		try {
    			if (!BlogComment.isDuplicate(this.email(), this.blogEntry(), this.comment())) {
    				this.blogComment = BlogComment.createBlogComment(this.blogEntry().editingContext(), this.comment(), new NSTimestamp(), this.email(), this.senderName(), this.blogEntry(), null);
    				this.blogComment.addObjectToBothSidesOfRelationshipWithKey(this.blogEntry().client(), BlogComment.CLIENT);
    				// save only if the comment is not a duplicate
    				this.blogComment.editingContext().saveChanges();
    				EVMailManager.sendNotificationMailForBlogCommentInRequest(this.blogComment, this.context().request());
    			}
    			this.cleanInput();
        		return true;
    		}
    		catch (Exception e) {
    			e.printStackTrace();
			}
    	}
    	return false;
	}
	
	/**
	 * Cleans all local variables after successful save to the database (happens in checkForComment)
	 */
	private void cleanInput() {
		this.setSenderName(null);
		this.setEmail(null);
		this.setComment(null);
		this.blogComment = null;
		this.editingContext.revert();
	}

	/**
	 * @return the blogEntry
	 */
	public BlogEntry blogEntry() {
		return blogEntry;
	}

	/**
	 * @param blogEntry the blogEntry to set
	 */
	public void setBlogEntry(BlogEntry blogEntry) {
		this.blogEntry = blogEntry;
	}
	
	/**
	 * Return the blog name combined with the blog entry title as the page title
	 * @return
	 */
	public String pageTitle () {
		return this.blogEntry().blog().name() + " -- " + this.blogEntry().title();
	}
	
	/**
	 * The current batch
	 * 
	 * @return
	 */
	public Object currentBatch () {
		return this.context().request().formValueForKey("batch");
	}

	/**
	 * @return the comment
	 */
	public String comment() {
		return comment;
	}

	/**
	 * @param comment the comment to set
	 */
	public void setComment(String comment) {
		this.comment = comment;
	}

	/**
	 * @return the email
	 */
	public String email() {
		return email;
	}

	/**
	 * @param email the email to set
	 */
	public void setEmail(String email) {
		this.email = email;
	}

	/**
	 * @return the name
	 */
	public String senderName() {
		return senderName;
	}

	/**
	 * @param name the name to set
	 */
	public void setSenderName(String name) {
		this.senderName = name;
	}

	/**
	 * @return the blogComment
	 */
	public BlogComment blogComment() {
		return blogComment;
	}

	/**
	 * @param blogComment the blogComment to set
	 */
	public void setBlogComment(BlogComment blogComment) {
		this.blogComment = blogComment;
	}

}