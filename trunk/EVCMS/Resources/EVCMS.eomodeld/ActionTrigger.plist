{
    attributes = (
        {
            allowsNull = N; 
            columnName = "action_id"; 
            name = actionId; 
            prototypeName = key; 
        }, 
        {
            allowsNull = N; 
            columnName = "action_trigger_id"; 
            name = actionTriggerId; 
            prototypeName = key; 
        }, 
        {allowsNull = N; columnName = active; name = active; prototypeName = flag; }, 
        {
            allowsNull = N; 
            columnName = "client_id"; 
            name = clientId; 
            prototypeName = key; 
        }, 
        {
            allowsNull = N; 
            columnName = "created_by_id"; 
            name = createdById; 
            prototypeName = key; 
        }, 
        {
            allowsNull = N; 
            columnName = "creation_time"; 
            name = creationTime; 
            prototypeName = datetime; 
        }, 
        {
            allowsNull = N; 
            columnName = "inheritance_type"; 
            name = inheritanceType; 
            prototypeName = string256; 
        }, 
        {allowsNull = N; columnName = name; name = name; prototypeName = string256; }, 
        {
            columnName = "trigger_description"; 
            name = triggerDescription; 
            prototypeName = string4k; 
        }
    ); 
    className = "net.events.cms.eo.ActionTrigger"; 
    classProperties = (
        action, 
        actionTriggerLogs, 
        active, 
        client, 
        createdBy, 
        creationTime, 
        inheritanceType, 
        name, 
        triggerDescription
    ); 
    externalName = "action_trigger"; 
    fetchSpecificationDictionary = {}; 
    isAbstractEntity = Y; 
    name = ActionTrigger; 
    primaryKeyAttributes = (actionTriggerId); 
    relationships = (
        {
            destination = Action; 
            isMandatory = Y; 
            isToMany = N; 
            joinSemantic = EOInnerJoin; 
            joins = ({destinationAttribute = actionId; sourceAttribute = actionId; }); 
            name = action; 
        }, 
        {
            destination = ActionTriggerLog; 
            isMandatory = N; 
            isToMany = Y; 
            joinSemantic = EOInnerJoin; 
            joins = ({destinationAttribute = actionTriggerId; sourceAttribute = actionTriggerId; }); 
            name = actionTriggerLogs; 
            numberOfToManyFaultsToBatchFetch = 50; 
        }, 
        {
            destination = Client; 
            isMandatory = Y; 
            isToMany = N; 
            joinSemantic = EOInnerJoin; 
            joins = ({destinationAttribute = clientId; sourceAttribute = clientId; }); 
            name = client; 
        }, 
        {
            destination = EventsUser; 
            isMandatory = Y; 
            isToMany = N; 
            joinSemantic = EOInnerJoin; 
            joins = ({destinationAttribute = contactId; sourceAttribute = createdById; }); 
            name = createdBy; 
        }
    ); 
}
