// Entity Modeler v1.0.0
{
	attributes = (
		{
			allowsNull = N;
			columnName = client_id;
			name = clientId;
			prototypeName = key;
		},
		{
			allowsNull = N;
			columnName = component_name;
			name = componentName;
			prototypeName = string256;
		},
		{
			columnName = created_by_id;
			name = createdById;
			prototypeName = key;
		},
		{
			allowsNull = N;
			columnName = creation_time;
			name = creationTime;
			prototypeName = datetime;
		},
		{
			columnName = css_container_name;
			name = cssContainerName;
			prototypeName = string256;
		},
		{
			columnName = css_container_type;
			name = cssContainerType;
			prototypeName = string256;
		},
		{
			columnName = element_description;
			name = elementDescription;
			prototypeName = string4k;
		},
		{
			allowsNull = N;
			columnName = element_name;
			name = elementName;
			prototypeName = string256;
		},
		{
			allowsNull = N;
			columnName = inheritance_type;
			name = inheritanceType;
			prototypeName = string256;
		},
		{
			columnName = page_element_id;
			name = pageElementId;
			prototypeName = key;
		},
		{
			columnName = site_id;
			name = siteId;
			prototypeName = key;
		}
	);
	className = net.events.cms.eo.PageElement;
	classProperties = (
		client,
		componentName,
		createdBy,
		creationTime,
		cssContainerName,
		cssContainerType,
		elementDescription,
		elementName,
		inheritanceType,
		pageWrappers,
		pages,
		site
	);
	externalName = page_elements;
	internalInfo = {
		_clientClassPropertyNames = (
			cssContainerName,
			cssContainerType,
			inheritanceType,
			pageWrappers,
			pages
		);
	};
	isAbstractEntity = Y;
	name = PageElement;
	primaryKeyAttributes = (
		pageElementId
	);
	relationships = (
		{
			destination = Client;
			isMandatory = Y;
			joinSemantic = EOInnerJoin;
			joins = (
				{
					destinationAttribute = clientId;
					sourceAttribute = clientId;
				}
			);
			name = client;
		},
		{
			destination = Person;
			isMandatory = Y;
			joinSemantic = EOInnerJoin;
			joins = (
				{
					destinationAttribute = contactId;
					sourceAttribute = createdById;
				}
			);
			name = createdBy;
		},
		{
			deleteRule = EODeleteRuleCascade;
			destination = PageWrapperElement;
			isToMany = Y;
			joinSemantic = EOInnerJoin;
			joins = (
				{
					destinationAttribute = elementId;
					sourceAttribute = pageElementId;
				}
			);
			name = pageWrappers;
		},
		{
			deleteRule = EODeleteRuleCascade;
			destination = PageElementOnPage;
			isToMany = Y;
			joinSemantic = EOInnerJoin;
			joins = (
				{
					destinationAttribute = pageElementId;
					sourceAttribute = pageElementId;
				}
			);
			name = pages;
		},
		{
			destination = Site;
			isMandatory = Y;
			joinSemantic = EOInnerJoin;
			joins = (
				{
					destinationAttribute = siteId;
					sourceAttribute = siteId;
				}
			);
			name = site;
		}
	);
}