// Entity Modeler v1.0.0
{
	attributes = (
		{
			allowsNull = N;
			columnName = client_id;
			name = clientId;
			prototypeName = key;
		},
		{
			allowsNull = N;
			columnName = creation_time;
			name = creationTime;
			prototypeName = datetime;
		},
		{
			allowsNull = N;
			columnName = data_set_entry_id;
			name = dataSetEntryId;
			prototypeName = key;
		},
		{
			allowsNull = N;
			columnName = data_set_id;
			name = dataSetId;
			prototypeName = key;
		},
		{
			columnName = date;
			name = date;
			prototypeName = datetime;
		},
		{
			allowsNull = N;
			columnName = inheritance_type;
			name = inheritanceType;
			prototypeName = string32;
		},
		{
			allowsNull = N;
			columnName = person_id;
			name = personId;
			prototypeName = key;
		},
		{
			allowsNull = N;
			columnName = valid;
			name = valid;
			prototypeName = flag;
		}
	);
	className = net.events.cms.eo.MedicalDataSetEntry;
	classProperties = (
		client,
		creationTime,
		dataSetTemplate,
		date,
		inheritanceType,
		person,
		valid,
		values
	);
	externalName = data_set_entries;
	internalInfo = {};
	isAbstractEntity = N;
	maxNumberOfInstancesToBatchFetch = 10;
	name = MedicalDataSetEntry;
	parent = DataSetEntry;
	primaryKeyAttributes = (
		dataSetEntryId
	);
	relationships = (
		{
			destination = Client;
			isMandatory = Y;
			joinSemantic = EOInnerJoin;
			joins = (
				{
					destinationAttribute = clientId;
					sourceAttribute = clientId;
				}
			);
			name = client;
		},
		{
			destination = DataSetTemplate;
			isMandatory = Y;
			joinSemantic = EOInnerJoin;
			joins = (
				{
					destinationAttribute = dataSetId;
					sourceAttribute = dataSetId;
				}
			);
			name = dataSetTemplate;
		},
		{
			destination = StudyParticipant;
			isMandatory = Y;
			joinSemantic = EOInnerJoin;
			joins = (
				{
					destinationAttribute = contactId;
					sourceAttribute = personId;
				}
			);
			name = person;
		},
		{
			deleteRule = EODeleteRuleCascade;
			destination = DataSetItemValue;
			isMandatory = N;
			isToMany = Y;
			joinSemantic = EOInnerJoin;
			joins = (
				{
					destinationAttribute = dataSetEntryId;
					sourceAttribute = dataSetEntryId;
				}
			);
			name = values;
			numberOfToManyFaultsToBatchFetch = 20;
		}
	);
	restrictingQualifier = "inheritanceType = 'MedicalDataSetEntry'";
}