package net.events.cms.pages;
// Generated by the WOLips Templateengine Plug-in at Sep 2, 2007 6:34:39 PM

import java.util.*;

import org.apache.log4j.*;

import net.events.cms.eo.*;
import net.events.cms.extensions.*;
import net.events.eof.*;

import com.webobjects.appserver.*;
import com.webobjects.eoaccess.*;
import com.webobjects.eocontrol.*;
import com.webobjects.foundation.*;

import er.extensions.*;

public class EVSiteLoginPage extends EVCMSPage {
	
	// used for the login textfield
	private String login;

	// used for the password textfield
	private String password;

	// used in the conditional to show, whether the login faild
	private boolean messageAvailable = false;

	// the message to display to the user
	private String message;
	
	private EOEditingContext editingContext;
	
	private EVCMSSession session;

	private EVGenericRecord objectToCheckForUser;

	private String keyToCheckForUser;
	
	private Logger log = Logger.getLogger(EVSiteLoginPage.class);
	
    public EVSiteLoginPage(WOContext context) {
        super(context);
        this.editingContext = ERXEC.newEditingContext();
        
        session = (EVCMSSession) this.session();
    }

	/*
	 * Resetting some values, call to super
	 * @see com.webobjects.appserver.WOComponent#awake()
	 */
	public void awake() {
		super.awake();
		this.setMessageAvailable(false);

	}
	/**
	 * Login action
	 */
	public WOComponent submit() {

		// no empty entries allowed
		if (login == null || password == null || login.equals("") || password.equals("")) {
			this.setMessage("Login failed. Please fill both fields.");
			this.setMessageAvailable(true);
			return null;
		}

		NSDictionary values = new NSDictionary(new String[] { this.login, this.password }, new String[] { "login", "password" });
		try {
			Person user = (Person) EOUtilities.objectMatchingValues(editingContext, Person.ENTITY_NAME, values);
			
			if (user instanceof StudyParticipant) {
				StudyParticipant p = (StudyParticipant) user;
				if (!"active".equals(p.status())) {
					this.setMessage("Login.ACCOUNT_NOT_ACTIVE_MESSAGE");
					this.setMessageAvailable(true);
					return null;
				}
			}
			else if (user instanceof EventsUser) {
				EventsUser eu = (EventsUser) user;
				if (!eu.active()) {
					this.setMessage("Login.ACCOUNT_NOT_ACTIVE_MESSAGE");
					this.setMessageAvailable(true);
					return null;
				}
			}

			if (this.objectToCheckForUser != null) {
				// FIXME cug: make this more efficient
				NSArray users = ((NSArray) objectToCheckForUser.valueForKey(this.keyToCheckForUser)).immutableClone();
				Enumeration enumeration = users.objectEnumerator();
				boolean userFound = false;
				while (enumeration.hasMoreElements()) {
					Person person = (Person) enumeration.nextElement();
					if (user.primaryKey().equals(person.primaryKey())) {
						userFound = true;
						break;
					}
				}
				if (!userFound) {
					this.setMessage("You are not a participant of this study!");
					this.setMessageAvailable(true);
					return null;
				}
			}

			this.session().takeValueForKey (user, "currentUser");
			this.session().takeValueForKey(user.client(), "currentClient");
			
			log.info("****** User logged in: " + user.toString());
			
			return this.pageToView();
			
		} catch (Exception e) {
			e.printStackTrace();

			this.setMessageAvailable(true);
			this.setMessage("Login failed. Login or password wrong.");

			return null;
		}
	}

	/**
	 getter for login instance var
	 */
	public String login() {
		return login;
	}

	/**
	 setter for login instance var
	 */
	public void setLogin(String newLogin) {
		login = newLogin;
	}

	/**
	 getter for password instance var
	 */
	public String password() {
		return password;
	}

	/**
	 setter for password instance var
	 */
	public void setPassword(String newPassword) {
		password = newPassword;
	}

	/**
	 * @return the messageAvailable
	 */
	public boolean messageAvailable() {
		return this.messageAvailable;
	}

	/**
	 * @param messageAvailable the messageAvailable to set
	 */
	public void setMessageAvailable(boolean flag) {
		this.messageAvailable = flag;
	}

	/**
	 * @return the message
	 */
	public String message() {
		if (message != null) {
			return this.message;
		} else
			return "No message available - Sorry";
	}

	/**
	 * @param message the message to set
	 */
	public void setMessage(String message) {
		this.message = message;
	}

	/**
	 * @return the page that was initially requested
	 */
	public WOComponent pageToView() {
		WOComponent nextpage = null;
		if (this.session.requestedObject() instanceof DataSetTemplate) {
			nextpage = (EVDataSetPage) this.pageWithName(EVDataSetPage.class.getName());
		}
		return nextpage;
	}

	public void setObjectToCheckForUser(EVGenericRecord object) {
		this.objectToCheckForUser = object;
		
	}

	public void setKeyToCheckForUser(String key) {
		this.keyToCheckForUser = key;
		
	}

}