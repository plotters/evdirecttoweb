package net.events.cms.pages;
// Generated by the WOLips Templateengine Plug-in at Jul 22, 2007 4:30:19 PM

import java.util.*;

import net.events.cms.eo.*;
import net.events.cms.extensions.*;

import com.webobjects.appserver.*;
import com.webobjects.foundation.*;

import er.extensions.*;

public class EVDataSetPage extends EVCMSEditPage {
	
	/**
	 * For iterating over the values
	 */
	public DataSetItemValue value;
	
	/**
	 * the current index of the values 
	 */
	public int index;
	
	/**
	 * the tempplate
	 */
	public DataSetTemplate dataSetTemplate;
	
	/**
	 * the values that failed validation 
	 */
	public NSMutableArray validationValues;
	
	/**
	 * For iterating over the sections
	 */
	public DataSetSection currentSection;

    public EVDataSetPage(WOContext context) {
        super(context);
        
   		dataSetTemplate = ERXEOControlUtilities.localInstanceOfObject(this.editingContext, (DataSetTemplate) ((EVCMSSession) this.session()).requestedObject());
		DataSetEntry entry = dataSetTemplate.createNewInstanceForTemplateInEditingContext(editingContext);

		if (ERXThreadStorage.valueForKey(EVCMSConstants.CURRENT_USER) != null) {
			if (entry instanceof MedicalDataSetEntry)
			((MedicalDataSetEntry) entry).setPerson((StudyParticipant) ERXThreadStorage.valueForKey(this.editingContext, EVCMSConstants.CURRENT_USER));
		}
		this.setObject(entry);
    }
    
    public void awake () {
    	super.awake();
    }

    /**
	 * Overridden to support getting the errors only for the specific object
	 */
    public WOComponent saveChanges () {
    	super.saveChanges();
    	
    	Enumeration<DataSetItemValue> valueEnum = object().values().objectEnumerator();
    	validationValues = new NSMutableArray();
    	while (valueEnum.hasMoreElements()) {
    		DataSetItemValue item = valueEnum.nextElement();
    		try {
    			item.validateForSave();
    		}
    		catch (Exception e) {
				this.validationValues.addObject(item);
			}
    	}
    	
    	if (this.validationErrors() != null && this.validationErrors().count() > 0) {
    		return null;
    	}
    	else {
    		WOComponent nextpage = this.pageWithName(EVGenericMessagePage.class.getName());
    		nextpage.takeValueForKey(this.dataSetTemplate.textForThankYouPage(), EVCMSConstants.MESSAGE_KEY);
    		nextpage.takeValueForKey(this.dataSetTemplate.cssClassForThankYouMessage(), EVCMSConstants.CSS_CLASS_FOR_MESSAGE_KEY);
    		nextpage.takeValueForKey(Boolean.TRUE, EVCMSConstants.SHALL_TERMINATE_SESSION_KEY);
    		nextpage.takeValueForKey(this.dataSetTemplate.dataSetPageTemplate(), "previousPage");
    		
    		return nextpage;
    	}
    }

    public void appendToResponse (WOResponse r, WOContext c) {
    	this.setPage(this.dataSetTemplate.dataSetPageTemplate());
   		super.appendToResponse(r, c);
    }
    
    /**
     * Just cast the object() from parent to a MedicalDataSetEntry 
     */
    public DataSetEntry object () {
    	return (DataSetEntry) super.object();
    }
    
    /**
     * The sections
     * 
     * @return
     */
    public NSArray sections () {
    	return this.object().sections();
    }
    
    /**
     * The values to be displayed in the current section
     * 
     * @return
     */
    public NSArray valuesForSection () {
    	return this.object().valuesForSection(currentSection);
    }
    
    /**
     * The values that are not in any section - numbering is a bit odd
     * 
     * @return
     */
    public NSArray valuesNotInSections () {
    	return this.object().valuesNotInASection();
    }
    
    /**
	 * Return the class for the current item value - used for specifying a
	 * background color if an error exists
	 * 
	 * @return
	 */
    public String itemClass () {
    	if (this.validationValues != null) {
    		if (validationValues.count() > 0 && validationValues.contains(this.value)) {
    			return "box border_red halfmargin_b error_bg";
    		}
    	}
    	return "box halfmargin_b border_grey_1px";
    }

}