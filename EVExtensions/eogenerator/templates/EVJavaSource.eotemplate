<$comment
EO Template for use by "eogenerator" based upon MiscMerge engine.
You may customize this file to modify the templates generated
by this tool.  See the MiscMerge documentation for a description
of the parsing language.  The engine gets passed this file and an
EOEntity to process, so the methods used must be ones that an
EOEntity can respond to.

BE SURE NOT TO INCLUDE DATES IN THIS FILE.  Since the "eogenerator"
tool tries to compare the newly generated file with the old file,
adding dates to this file will guarantee the old file gets
overridden by the new file, forcing a recompilation of your EO.$>// <$GEN_PREFIX$><$classNameWithoutPackage$>.java
// 
// Created by eogenerator/JavaSourceEOF52.eotemplate
// DO NOT EDIT.  Make changes to <$classNameWithoutPackage$>.java instead.
<$foreach package classPackage do$>package <$package$>;

<$endforeach do$>
import com.webobjects.eoaccess.*;
import com.webobjects.eocontrol.*;
import com.webobjects.foundation.*;
import java.math.BigDecimal;
import java.util.*;
import er.extensions.*;
import org.apache.log4j.Logger;
import net.events.eof.*;

public abstract class <$GEN_PREFIX$><$classNameWithoutPackage$> extends <$if hasParentEntity$><$javaParentClassName$><$else$><$EOGenericRecord$><$endif$> {
	private static Logger log = Logger.getLogger( <$GEN_PREFIX$><$classNameWithoutPackage$>.class );
	
	// KeyValueCoding support
	<$foreach propertyName classPropertyNames.@reversedArray do$>
    public static final String <$propertyName.uppercaseString$> = "<$propertyName$>";<$endforeach do$>
    
    /**
     * For KeyValueCoding support
     */
    public static final String ENTITY_NAME = "<$name$>";

	/**
	 * Standard constructor
	 */	
    public <$GEN_PREFIX$><$classNameWithoutPackage$>() {
        super();
    }
    
    /**
     * This sets the property "inheritanceType" if exists and if the class has a parent entity.
     * This is just a convention for my database and inheritance design style. 
     */
    public void awakeFromInsertion (EOEditingContext editingContext) {
    	super.awakeFromInsertion(editingContext);<$if hasParentEntity$>
    	

    	if (this.attributeKeys().containsObject("inheritanceType")) {
    		this.takeValueForKey ("<$name$>", "inheritanceType");
    	}<$endif$>
    	<$if hasParentEntity$><$else$>
    	if (this.attributeKeys().containsObject("creationTime")) {
    		this.takeValueForKey (new NSTimestamp(), "creationTime");
    	}
    	if (this.toOneRelationshipKeys().containsObject("createdBy")) {
	   		EOEnterpriseObject currentUser = ERXEOControlUtilities.localInstanceOfObject(this.editingContext(), (EOEnterpriseObject)ERXThreadStorage.valueForKey("CURRENT_USER"));
			if (currentUser != null) {
	    		this.addObjectToBothSidesOfRelationshipWithKey(currentUser, "createdBy");
	    	}
    	}
    	if (this.toOneRelationshipKeys().containsObject("client")) {
    		EOEnterpriseObject currentClient = ERXEOControlUtilities.localInstanceOfObject(this.editingContext(), (EOEnterpriseObject)ERXThreadStorage.valueForKey("CURRENT_CLIENT"));
			if (currentClient != null) {
	    		this.addObjectToBothSidesOfRelationshipWithKey(currentClient, "client");
	    	}
    	}<$endif$>
    }

	/**
	 * Create a "<$classNameWithoutPackage$>" object with all required values
	 */
	public static <$classNameWithoutPackage$> create<$classNameWithoutPackage$>(EOEditingContext editingContext<$foreach Attribute classAttributes.@sortedNameArray do$><$if !Attribute.allowsNull$>, <$Attribute.javaValueClassName$> <$Attribute.name$><$endif$><$endforeach do$><$foreach Attribute parentEntity.classAttributes.@sortedNameArray do$><$if !Attribute.allowsNull$><$set RestrictingQualifierKey = false$><$foreach QualifierKey restrictingQualifier.allQualifierKeys do$><$if Attribute.name = QualifierKey$><$set RestrictingQualifierKey = true$><$endif$><$endforeach do$><$if RestrictingQualifierKey = false$>, <$Attribute.javaValueClassName$> <$Attribute.name$><$endif$><$endif$><$endforeach do$><$foreach ToOneRelationship classToOneRelationships.@sortedNameArray do$><$if ToOneRelationship.isMandatory$>, <$ToOneRelationship.destinationEntity.referenceJavaClassName$> <$ToOneRelationship.name$><$endif$><$endforeach do$><$foreach ToOneRelationship parentEntity.classToOneRelationships.@sortedNameArray do$><$if ToOneRelationship.isMandatory$>, <$ToOneRelationship.destinationEntity.referenceJavaClassName$> <$ToOneRelationship.name$><$endif$><$endforeach do$>) {
		if (log.isDebugEnabled()) log.debug ("Creating object: <$classNameWithoutPackage$>");
		<$classNameWithoutPackage$> eoObject = (<$classNameWithoutPackage$>)EOUtilities.createAndInsertInstance(editingContext, <$GEN_PREFIX$><$classNameWithoutPackage$>.ENTITY_NAME);<$foreach Attribute classAttributes.@sortedNameArray do$><$if !Attribute.allowsNull$>
		eoObject.set<$Attribute.name.initialCapitalString$>(<$Attribute.name$>);<$endif$><$endforeach do$><$foreach ToOneRelationship classToOneRelationships.@sortedNameArray do$><$if ToOneRelationship.isMandatory$>
		eoObject.set<$ToOneRelationship.name.initialCapitalString$>(<$ToOneRelationship.name$>);<$endif$><$endforeach do$><$foreach Attribute parentEntity.classAttributes.@sortedNameArray do$><$if !Attribute.allowsNull$><$set RestrictingQualifierKey = false$><$foreach QualifierKey restrictingQualifier.allQualifierKeys do$><$if Attribute.name = QualifierKey$><$set RestrictingQualifierKey = true$><$endif$><$endforeach do$><$if RestrictingQualifierKey = false$>
		eoObject.set<$Attribute.name.initialCapitalString$>(<$Attribute.name$>);<$endif$><$endif$><$endforeach do$><$foreach ToOneRelationship parentEntity.classToOneRelationships.@sortedNameArray do$><$if ToOneRelationship.isMandatory$>
		eoObject.set<$ToOneRelationship.name.initialCapitalString$>(<$ToOneRelationship.name$>);<$endif$><$endforeach do$>
		return eoObject;
	}
 
 	/**
 	 * Fetch all "<$classNameWithoutPackage$>" objects from the database. Be careful with that function
 	 * as it might return a lot of objects
 	 */
	public static NSArray fetchAllObjects(EOEditingContext _editingContext) {
		if (log.isDebugEnabled()) log.debug ("Fetching all objects for entity '<$name$>'");
		return <$GEN_PREFIX$><$classNameWithoutPackage$>.fetchAllObjects(_editingContext, null);
	}
 
 	/**
 	 * Fetch all "<$classNameWithoutPackage$>" objects from the database. Be careful with that function
 	 * as it might return a lot of objects
 	 */
	public static NSArray fetchAllObjects(EOEditingContext _editingContext, NSArray _sortOrderings) {
		if (log.isDebugEnabled()) log.debug ("Fetching all objects for entity '<$name$>' with sortOrderings " + _sortOrderings);
		return <$GEN_PREFIX$><$classNameWithoutPackage$>.fetchObjectsWithQualifier(_editingContext, null, _sortOrderings);
	}

	/**
	 * Fetches all "<$classNameWithoutPackage$>" objects matching value for Key
	 */
	public static NSArray fetchObjectsWithKeyAndValue(EOEditingContext _editingContext, String _keyName, Object _value) {
		return <$GEN_PREFIX$><$classNameWithoutPackage$>.fetchObjectsWithQualifier(_editingContext, new EOKeyValueQualifier(_keyName, EOQualifier.QualifierOperatorEqual, _value), null);
	}

	/**
	 * Fetches all "<$classNameWithoutPackage$>" objects matching the given qualifier
	 */
	public static NSArray fetchObjectsWithQualifier(EOEditingContext _editingContext, EOQualifier _qualifier, NSArray _sortOrderings) {
		if (log.isDebugEnabled()) log.debug ("Fetching all objects for entity '<$name$>' with qualifier " + _qualifier + "and sortOrderings " + _sortOrderings);
		EOFetchSpecification fetchSpec = new EOFetchSpecification(<$GEN_PREFIX$><$classNameWithoutPackage$>.ENTITY_NAME, _qualifier, _sortOrderings);
		fetchSpec.setIsDeep(true);
		NSArray eoObjects = _editingContext.objectsWithFetchSpecification(fetchSpec);
		return eoObjects;
 	}
 
 	/**
 	 * Fetch exactly one object for value for key. Uses fetchWithQualifier for that. Might throw an Exception 
 	 * if more than one object was found! Returns null, if no object was found.
 	 */
	public static <$classNameWithoutPackage$> fetch<$classNameWithoutPackage$>WithKeyAndValue(EOEditingContext _editingContext, String _keyName, Object _value) {
		return <$GEN_PREFIX$><$classNameWithoutPackage$>.fetch<$classNameWithoutPackage$>WithQualifier(_editingContext, new EOKeyValueQualifier(_keyName, EOQualifier.QualifierOperatorEqual, _value));
	}
 
 	/**
 	 * Fetch exactly one object for value for key. Might throw an Exception if more than one object was found!
 	 * Returns null, if no object was found.
 	 */
 	public static <$classNameWithoutPackage$> fetch<$classNameWithoutPackage$>WithQualifier(EOEditingContext _editingContext, EOQualifier _qualifier) {
		if (log.isDebugEnabled()) log.debug ("Fetching '<$name$>' with qualifier: " + _qualifier);
		NSArray eoObjects = <$GEN_PREFIX$><$classNameWithoutPackage$>.fetchObjectsWithQualifier(_editingContext, _qualifier, null);
		<$classNameWithoutPackage$> eoObject;
		int count = eoObjects.count();
		if (count == 0) {
			eoObject = null;
  		}
		else if (count == 1) {
			eoObject = (<$classNameWithoutPackage$>)eoObjects.objectAtIndex(0);
		}
		else {
			throw new IllegalStateException("There was more than one <$classNameWithoutPackage$> that matched the qualifier '" + _qualifier + "'.");
		}
		return eoObject;
	}
    
 	/**
 	 * Fetch exactly one object for value for key. Might throw an Exception if none or more than one object was found!
 	 */
	public static <$classNameWithoutPackage$> fetchRequired<$classNameWithoutPackage$>WithKeyAndValue(EOEditingContext _editingContext, String _keyName, Object _value) {
		return <$GEN_PREFIX$><$classNameWithoutPackage$>.fetchRequired<$classNameWithoutPackage$>WithQualifier(_editingContext, new EOKeyValueQualifier(_keyName, EOQualifier.QualifierOperatorEqual, _value));
	}
 
 	/**
 	 * Fetch exactly one object for value for key. Might throw an Exception if none or more than one object was found!
 	 */
	public static <$classNameWithoutPackage$> fetchRequired<$classNameWithoutPackage$>WithQualifier(EOEditingContext _editingContext, EOQualifier _qualifier) {
		if (log.isDebugEnabled()) log.debug ("Fetching required '<$name$>' with qualifier: " + _qualifier);
		<$classNameWithoutPackage$> eoObject = <$GEN_PREFIX$><$classNameWithoutPackage$>.fetch<$classNameWithoutPackage$>WithQualifier(_editingContext, _qualifier);
		if (eoObject == null) {
			throw new NoSuchElementException("There was no <$classNameWithoutPackage$> that matched the qualifier '" + _qualifier + "'.");
   		}
		return eoObject;
	}
 
 	/**
 	 * Returns a local instance of this object in the given editing context
 	 */
	public <$classNameWithoutPackage$> localInstanceOf<$classNameWithoutPackage$>(EOEditingContext _editingContext) {
		if (log.isDebugEnabled()) log.debug ("Returning local instance of '<$name$>': " + this.toString());
		return (<$classNameWithoutPackage$>)EOUtilities.localInstanceOfObject(_editingContext, this);
	}
 
 	/** 
 	 * Returns a local object or null; this works for null objects as wel
 	 */
	public static <$classNameWithoutPackage$> localInstanceOf<$classNameWithoutPackage$>(EOEditingContext _editingContext, <$classNameWithoutPackage$> _eo) {
		if (_eo != null) {
			if (log.isDebugEnabled()) log.debug ("Returning local instance of '<$name$>': " + _eo.toString());
		}
		return (_eo == null) ? null : (<$classNameWithoutPackage$>)EOUtilities.localInstanceOfObject(_editingContext, _eo);
	}
  
<$foreach Attribute classAttributes.@sortedNameArray do$>
	/**
	 * The value for "<$Attribute.name$>"
	 */
    public <$Attribute.javaValueClassName$> <$Attribute.name$>() {
        return (<$Attribute.javaValueClassName$>) storedValueForKey("<$Attribute.name$>");
    }

	/**
	 * Set the value for "<$Attribute.name$>"
	 */
    public void set<$Attribute.name.initialCapitalString$>(<$Attribute.javaValueClassName$> aValue) {
        if( log.isDebugEnabled() ) log.debug( "updating <$Attribute.name$> from "+<$Attribute.name$>()+" to "+aValue );
        takeStoredValueForKey(aValue, "<$Attribute.name$>");
    }
<$endforeach do
$><$foreach ToOneRelationship classToOneRelationships.@sortedNameArray do$>
    public <$ToOneRelationship.destinationEntity.referenceJavaClassName$> <$ToOneRelationship.name$>() {
        return (<$ToOneRelationship.destinationEntity.referenceJavaClassName$>)storedValueForKey("<$ToOneRelationship.name$>");
    }

    public void set<$ToOneRelationship.name.initialCapitalString$>(<$ToOneRelationship.destinationEntity.referenceJavaClassName$> aValue) {
        takeStoredValueForKey(aValue, "<$ToOneRelationship.name$>");
    }
<$endforeach do
$><$foreach ToManyRelationship classToManyRelationships.@sortedNameArray do$>
	/**
	 * Returns the objects for the relationship "<$ToManyRelationship.name$>"
	 */
    public NSArray <$ToManyRelationship.name$>() {
        return (NSArray)storedValueForKey("<$ToManyRelationship.name$>");
    }

    public void set<$ToManyRelationship.name.initialCapitalString$>(NSArray aValue) {
    	if( log.isDebugEnabled() ) log.debug( "updating <$ToManyRelationship.name$> from "+<$ToManyRelationship.name$>()+" to "+aValue );
        takeStoredValueForKey(aValue, "<$ToManyRelationship.name$>");
    }

    public void addTo<$ToManyRelationship.name.initialCapitalString$>(<$ToManyRelationship.destinationEntity.referenceJavaClassName$> object) {
        if( log.isDebugEnabled() ) log.debug( "adding "+object+" to <$ToManyRelationship.name$>" );
	    includeObjectIntoPropertyWithKey(object, "<$ToManyRelationship.name$>");
    }
    <$comment
    /**
     * add object to relationship "<$ToManyRelationship.name$>", uses addObjectToBothSidesOfRelationship
     */
    public void addTo<$ToManyRelationship.name.initialCapitalString$>(<$ToManyRelationship.destinationEntity.referenceJavaClassName$> object) {
        if( log.isDebugEnabled() ) log.debug( "adding "+object+" to <$ToManyRelationship.name$> relationship" );
        addObjectToBothSidesOfRelationshipWithKey( object, "<$ToManyRelationship.name$>" );
    }$>

    public void removeFrom<$ToManyRelationship.name.initialCapitalString$>(<$ToManyRelationship.destinationEntity.referenceJavaClassName$> object) {
        if( log.isDebugEnabled() ) log.debug( "removing "+object+" from <$ToManyRelationship.name$>" );
	    excludeObjectFromPropertyWithKey(object, "<$ToManyRelationship.name$>");
    }
	<$comment
	/**
	 * removes an object from relationship "<$ToManyRelationship.name$>", uses "removeObjectFromBothSidesOfRelationshipWithKey"
	 */
    public void removeFrom<$ToManyRelationship.name.initialCapitalString$>(<$ToManyRelationship.destinationEntity.referenceJavaClassName$> object) {
        if( log.isDebugEnabled() ) log.debug( "removing "+object+" from <$ToManyRelationship.name$> relationship" );
        removeObjectFromBothSidesOfRelationshipWithKey( object, "<$ToManyRelationship.name$>" );
    }$>
    
    /** 
     * creates a new object "<$ToManyRelationship.destinationEntity.referenceJavaClassName$>" and add it
     * to the relationship "<$ToManyRelationship.name$>"
     */
    public <$ToManyRelationship.destinationEntity.referenceJavaClassName$> createObjectAndAddTo<$ToManyRelationship.name.initialCapitalString$>() {
    	if (log.isDebugEnabled()) log.debug ("Creating object and adding to relationship: <$ToManyRelationship.name$>");
	    EOClassDescription eoClassDesc = EOClassDescription.classDescriptionForEntityName("<$ToManyRelationship.destinationEntity.name$>");
	    EOEnterpriseObject eoObject = eoClassDesc.createInstanceWithEditingContext(editingContext(), null);
	    editingContext().insertObject(eoObject);
	    addObjectToBothSidesOfRelationshipWithKey(eoObject, "<$ToManyRelationship.name$>");
	    return (<$ToManyRelationship.destinationEntity.referenceJavaClassName$>) eoObject;
    }
    
    /**
     * Removes object from the relationship "<$ToManyRelationship.name$>" and delete object
     */
    public void removeFrom<$ToManyRelationship.name.initialCapitalString$>AndDelete(<$ToManyRelationship.destinationEntity.referenceJavaClassName$> object) {
    	if (log.isDebugEnabled()) log.debug ("Deleting object " + object + "from relationship: <$ToManyRelationship.name$>");
        removeObjectFromBothSidesOfRelationshipWithKey(object, "<$ToManyRelationship.name$>");<$
if !ToManyRelationship.ownsDestination$>
        editingContext().deleteObject(object);<$endif$>
    }
    
    /**
     * Delete all objects found in the relationship "<$ToManyRelationship.name$>", be careful, this method
     * DELETES it does not only a remove!
     */
    public void deleteAll<$ToManyRelationship.name.initialCapitalString$>() {
    	if (log.isDebugEnabled()) log.debug ("Deleting all objects from relationship: <$ToManyRelationship.name$>");
	    Enumeration objects = <$ToManyRelationship.name$>().objectEnumerator();
	    while ( objects.hasMoreElements() )
	        removeFrom<$ToManyRelationship.name.initialCapitalString$>AndDelete((<$ToManyRelationship.destinationEntity.referenceJavaClassName$>)objects.nextElement());
    }
<$endforeach do$><$foreach FetchSpec javaBeautifiedFetchSpecificationDictionaries.@sortedNameArray do$>
	/**
	 * Gets the objects for the fetchspec "<$FetchSpec.niceName$>" and bindings
	 */
	public static NSArray fetchWith<$FetchSpec.niceName$>( EOEditingContext ec<$foreach Binding FetchSpec.bindings do2$>, <$Binding.codeType$><$Binding.name$>Binding<$endforeach do2$> ) {
		NSMutableDictionary	bindings = new NSMutableDictionary();<$foreach Binding FetchSpec.bindings do2$>
		if( <$Binding.name$>Binding != null )
			bindings.setObjectForKey(<$Binding.name$>Binding, "<$Binding.name$>");<$endforeach do2$>
			
		if (bindings.allKeys() == null || bindings.allKeys().count() == 0) {
			bindings = null;
		}
		
		return EOUtilities.objectsWithFetchSpecificationAndBindings(
			ec,
			"<$name$>",
			"<$FetchSpec.fetchName$>",
			bindings );
	}
	
	/**
	 * fetches ONE object for the fetchspec <$FetchSpec.niceName$>
	 */
	public static <$classNameWithoutPackage$> fetchOneWith<$FetchSpec.niceName$>( EOEditingContext ec<$foreach Binding FetchSpec.bindings do2$>, <$Binding.codeType$><$Binding.name$>Binding<$endforeach do2$> ) {
		<$classNameWithoutPackage$>	result = null;
		NSMutableDictionary	bindings = new NSMutableDictionary();<$foreach Binding FetchSpec.bindings do2$>
		if( <$Binding.name$>Binding != null )
			bindings.setObjectForKey(<$Binding.name$>Binding, "<$Binding.name$>");<$endforeach do2$>
			
		if (bindings.allKeys() == null || bindings.allKeys().count() == 0) {
			bindings = null;
		}
		try {
			result = (<$classNameWithoutPackage$>) EOUtilities.objectWithFetchSpecificationAndBindings(
				ec,
				"<$name$>",
				"<$FetchSpec.fetchName$>",
				bindings );
		} catch( EOObjectNotAvailableException e ) {}
		
		return result;
	}
<$endforeach do$>}